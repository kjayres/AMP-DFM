#!/usr/bin/env python3
"""plot_potency_roc_overlay.py

Self-contained script that overlays ROC curves for the three potency
models (XGBoost, Random-Forest, Logistic-Regression) and **immediately
shows** the figure when run via `python` or `%run` in a Jupyter
notebook.  Nothing is saved unless you pass `--out FIG.png`.

It looks for the model artefacts in the most common HPC locations:
    1) <this script>/../models
    2) $HOME/mog_dfm/ampflow/models

Expected files (generated by the training scripts):
    potency_judge/potency_judge_test_results.csv
    potency_rf/potency_rf_test_results.csv
    potency_logreg/potency_logreg_test_results.csv
"""
from __future__ import annotations

import argparse
import sys
from pathlib import Path

import matplotlib
# Use a non-interactive backend only when not in an IPython / Jupyter session
try:
    from IPython import get_ipython  # type: ignore
    _IN_IPY = get_ipython() is not None
except ImportError:
    _IN_IPY = False

if not _IN_IPY:
    matplotlib.use("Agg")  # headless safe

import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import roc_auc_score, roc_curve

# -----------------------------------------------------------------------------
# Locate the default models directory
# -----------------------------------------------------------------------------
try:
    THIS_DIR = Path(__file__).resolve().parent
except NameError:
    THIS_DIR = Path.cwd()

CANDIDATES = [
    THIS_DIR.parent / "models",                          # repo layout
    Path.home() / "mog_dfm/ampflow/models",              # typical HPC install
]
DEFAULT_MODELS_ROOT: Path | None = next((p for p in CANDIDATES if p.exists()), None)
if DEFAULT_MODELS_ROOT is None:
    DEFAULT_MODELS_ROOT = CANDIDATES[0]  # fall back to first candidate

# Where to save individual PNGs when running full batch
DEFAULT_PLOTS_DIR = Path.home() / "mog_dfm/ampflow/plots"
DEFAULT_PLOTS_DIR.mkdir(parents=True, exist_ok=True)

# -----------------------------------------------------------------------------
# Helper – read ROC points and AUC from test_results CSV
# -----------------------------------------------------------------------------

def _load_curve(csv_path: Path):
    df = pd.read_csv(csv_path)
    if {"true_label", "predicted_proba"}.issubset(df.columns):
        y_true = df["true_label"].to_numpy()
        y_score = df["predicted_proba"].to_numpy()
    else:
        raise ValueError(f"Missing required columns in {csv_path}")
    fpr, tpr, _ = roc_curve(y_true, y_score)
    auc = roc_auc_score(y_true, y_score)
    return fpr, tpr, auc


# -----------------------------------------------------------------------------
# Core plotting routine
# -----------------------------------------------------------------------------

def _overlay(models_root: Path, specs, title: str, *, out_path: Path | None = None):
    # Create figure with HydrAMP styling
    fig, ax = plt.subplots(figsize=(6, 4))
    
    # Apply HydrAMP styling
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_linewidth(1.2)
    ax.spines['bottom'].set_linewidth(1.2)
    ax.spines['left'].set_color('#B8B8B8')  # Darker grey
    ax.spines['bottom'].set_color('#B8B8B8')  # Darker grey
    
    # Add grid with same thickness as borders
    ax.grid(True, alpha=0.3, linewidth=1.2)
    ax.set_axisbelow(True)  # Grid behind plot elements
    
    curves = 0
    for label, folder, colour in specs:
        csv = models_root / folder / f"{folder}_test_results.csv"
        if not csv.exists():
            print(f"Warning: {csv} not found – skipping {label}.")
            continue
        fpr, tpr, auc = _load_curve(csv)
        ax.plot(fpr, tpr, colour, label=f"{label} (AUC {auc:.3f})", linewidth=3)
        curves += 1

    if curves == 0:
        raise FileNotFoundError(
            "None of the expected test_results.csv files were found under "
            f"{models_root}. Check the path or run the training scripts first."
        )

    # Style the diagonal reference line
    ax.plot([0, 1], [0, 1], color='#666666', linestyle='--', linewidth=1.5, alpha=0.8)
    
    ax.set_xlabel("False Positive Rate", fontsize=11)
    ax.set_ylabel("True Positive Rate", fontsize=11)
    ax.legend(frameon=False, fontsize=12)
    
    # Remove tick marks but keep labels
    ax.tick_params(axis='both', which='major', labelsize=9, length=0)
    
    plt.tight_layout()

    if out_path is not None:
        plt.savefig(out_path, dpi=300)
        print(f"Figure saved to {out_path}")

    if _IN_IPY:
        # Ensure the figure appears inline even if a non-interactive backend ended up being selected
        from IPython.display import display  # type: ignore
        display(plt.gcf())
    else:
        plt.show()
    plt.close()

def _overlay_subplot(ax, models_root: Path, specs, title: str):
    """Create ROC overlay on a given subplot axis."""
    
    # Apply HydrAMP styling
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_linewidth(1.2)
    ax.spines['bottom'].set_linewidth(1.2)
    ax.spines['left'].set_color('#B8B8B8')  # Darker grey
    ax.spines['bottom'].set_color('#B8B8B8')  # Darker grey
    
    # Add grid with same thickness as borders
    ax.grid(True, alpha=0.3, linewidth=1.2)
    ax.set_axisbelow(True)  # Grid behind plot elements
    
    curves = 0
    for label, folder, colour in specs:
        csv = models_root / folder / f"{folder}_test_results.csv"
        if not csv.exists():
            print(f"Warning: {csv} not found – skipping {label}.")
            continue
        fpr, tpr, auc = _load_curve(csv)
        ax.plot(fpr, tpr, colour, label=f"{label} (AUC {auc:.3f})", linewidth=3)
        curves += 1

    if curves == 0:
        print(f"Warning: No data found for {title}")
        return

    # Style the diagonal reference line
    ax.plot([0, 1], [0, 1], color='#666666', linestyle='--', linewidth=1.5, alpha=0.8)
    
    ax.set_xlabel("False Positive Rate", fontsize=11)
    ax.set_ylabel("True Positive Rate", fontsize=11)
    ax.legend(frameon=False, fontsize=12)
    
    # Remove tick marks but keep labels
    ax.tick_params(axis='both', which='major', labelsize=9, length=0)

# -----------------------------------------------------------------------------
# Public helpers for each task
# -----------------------------------------------------------------------------

def plot_potency_overlay(models_root: Path | str = DEFAULT_MODELS_ROOT, *, out_path: Path | str | None = None):
    specs = [
        ("XGBoost", "potency_judge", "tab:blue"),
        ("Random Forest", "potency_rf", "tab:red"),
        ("Logistic Regression", "potency_logreg", "tab:green"),
    ]
    _overlay(Path(models_root), specs, "Antimicrobial Activity classification – ROC curves", out_path=Path(out_path) if out_path else None)


def plot_cytotoxicity_overlay(models_root: Path | str = DEFAULT_MODELS_ROOT, *, out_path: Path | str | None = None):
    specs = [
        ("XGBoost", "cytotoxicity_judge", "tab:blue"),
        ("Random Forest", "cytotoxicity_rf", "tab:red"),
        ("Logistic Regression", "cytotoxicity_logreg", "tab:green"),
    ]
    _overlay(Path(models_root), specs, "Cytotoxicity classification – ROC curves", out_path=Path(out_path) if out_path else None)


def plot_hemolysis_overlay(models_root: Path | str = DEFAULT_MODELS_ROOT, *, out_path: Path | str | None = None):
    specs = [
        ("XGBoost", "hemolysis_judge", "tab:blue"),
        ("Random Forest", "hemolysis_rf", "tab:red"),
        ("Logistic Regression", "hemolysis_logreg", "tab:green"),
    ]
    _overlay(Path(models_root), specs, "Haemolysis classification – ROC curves", out_path=Path(out_path) if out_path else None)

def plot_all_roc_overlays_combined(models_root: Path | str = DEFAULT_MODELS_ROOT, *, out_path: Path | str | None = None):
    """Generate combined ROC curves for all three classification tasks in a multi-panel layout."""
    
    models_root = Path(models_root)
    print(f"Loading ROC data from: {models_root}")
    
    # Create figure with 3 subplots (1x3 grid)
    fig, axes = plt.subplots(1, 3, figsize=(18, 5))
    
    # Define specifications for each task with clean subplot titles
    task_specs = [
        ("Antimicrobial Activity Classification", [
            ("XGBoost", "potency_judge", "tab:blue"),
            ("Random Forest", "potency_rf", "tab:red"),
            ("Logistic Regression", "potency_logreg", "tab:green"),
        ]),
        ("Haemolysis Classification", [
            ("XGBoost", "hemolysis_judge", "tab:blue"),
            ("Random Forest", "hemolysis_rf", "tab:red"),
            ("Logistic Regression", "hemolysis_logreg", "tab:green"),
        ]),
        ("Cytotoxicity Classification", [
            ("XGBoost", "cytotoxicity_judge", "tab:blue"),
            ("Random Forest", "cytotoxicity_rf", "tab:red"),
            ("Logistic Regression", "cytotoxicity_logreg", "tab:green"),
        ])
    ]
    
    # Plot each task in its own subplot
    for i, (task_title, specs) in enumerate(task_specs):
        print(f"Generating ROC plot for {task_title}...")
        _overlay_subplot(axes[i], models_root, specs, task_title)
        # Add clean subplot title - larger font, no bold
        axes[i].set_title(task_title, fontsize=14, fontweight='normal', pad=10)
    
    plt.tight_layout()
    
    # Save combined figure
    if out_path is None:
        out_path = DEFAULT_PLOTS_DIR / "roc_curves_combined.png"
    else:
        out_path = Path(out_path)
    
    out_path.parent.mkdir(parents=True, exist_ok=True)
    plt.savefig(out_path, dpi=300, bbox_inches='tight')
    print(f"Combined ROC curves saved to {out_path}")
    
    # Always display in Jupyter
    if _IN_IPY:
        from IPython.display import display
        display(plt.gcf())
    else:
        plt.show()
    plt.close()

# ------------------------------------------------------------
# Convenience: when executed (CLI or pasted) show all 3 overlays
# ------------------------------------------------------------

def _show_all(models_root: Path = DEFAULT_MODELS_ROOT):
    """Display combined ROC overlays in multi-panel layout."""
    plot_all_roc_overlays_combined(models_root)
    print("Saved combined ROC figure to", DEFAULT_PLOTS_DIR)


# -----------------------------------------------------------------------------
# CLI execution (command-line / %run) – skip when inside an IPython cell paste
# -----------------------------------------------------------------------------

if __name__ == "__main__" and not _IN_IPY:
    p = argparse.ArgumentParser(description="Overlay ROC curves for AMP classification tasks and display the figures.")
    p.add_argument("--models_root", default=str(DEFAULT_MODELS_ROOT), help="Directory containing model sub-folders")
    args, _ = p.parse_known_args()

    models_dir = Path(args.models_root)
    if not models_dir.exists():
        sys.exit(f"Models directory {models_dir} does not exist.")

    _show_all(models_dir)

# -----------------------------------------------------------------------------
# Auto-run in three situations -------------------------------------------------
#   1) `%run plot_potency_roc_overlay.py`  →  __name__ == '__main__' & not _IN_IPY
#   2) Paste entire file in a notebook cell  →  __name__ == '__main__' & _IN_IPY
#   3) `import plot_potency_roc_overlay` inside notebook  →  __name__ != '__main__' & _IN_IPY
# The logic below covers all three without extra user steps.
# -----------------------------------------------------------------------------

if (_IN_IPY and __name__ == "__main__"):
    # Case 2 – pasted into a cell: just run with defaults.
    try:
        _show_all(Path(DEFAULT_MODELS_ROOT))
    except Exception as err:
        print("plot_potency_roc_overlay –", err)

# Case 1 is handled by the CLI earlier (__name__ == '__main__' & not _IN_IPY)
# Case 3 – imported inside notebook – already handled above (__name__ != '__main__')
elif _IN_IPY and __name__ != "__main__":
    try:
        _show_all(Path(DEFAULT_MODELS_ROOT))
    except Exception as err:
        print("plot_potency_roc_overlay –", err)
