"""mmseqs_cluster.py

Cluster peptide sequences at 80% global identity using MMseqs2 easy-linclust.

This script:
1. Reads sequences from amp_dfm/data/embeddings/seqs.txt
2. Converts them to FASTA format
3. Runs MMseqs2 clustering (80% identity, 80% coverage)
4. Outputs clusters_cluster.tsv (member, representative) mapping

Prerequisites:
- MMseqs2 must be installed in the mog-dfm conda environment
- seqs.txt must exist (generated by generate_embeddings.py)

Run via:
    qsub amp_dfm/scripts/data_preprocessing/mmseqs_cluster.sh
"""
import subprocess
import tempfile
from pathlib import Path


def main():
    # Paths - use amp_dfm structure
    ROOT = Path(__file__).resolve().parents[3]  # /mog_dfm
    EMB_DIR = ROOT / "amp_dfm" / "data" / "embeddings"
    
    seqs_txt = EMB_DIR / "seqs.txt"
    seqs_fasta = EMB_DIR / "seqs.fasta"
    clusters_out = EMB_DIR / "clusters"
    
    if not seqs_txt.exists():
        raise FileNotFoundError(
            f"Input file not found: {seqs_txt}\n"
            "Run generate_embeddings.py first to create seqs.txt"
        )
    
    print(f"Building FASTA from {seqs_txt}...")
    
    # Build FASTA: convert one-sequence-per-line to FASTA format
    with open(seqs_txt, 'r') as f_in, open(seqs_fasta, 'w') as f_out:
        for idx, line in enumerate(f_in, start=1):
            seq = line.strip()
            if seq:
                f_out.write(f">seq{idx}\n{seq}\n")
    
    print(f"Created {seqs_fasta}")
    
    # Create temporary directory for MMseqs2 intermediates
    with tempfile.TemporaryDirectory() as tmpdir:
        print(f"\nRunning MMseqs2 clustering (80% identity, 80% coverage)...")
        
        # Run MMseqs2 easy-linclust
        cmd = [
            "mmseqs", "easy-linclust",
            str(seqs_fasta),
            str(clusters_out),
            tmpdir,
            "--min-seq-id", "0.8",
            "-c", "0.8",
            "--cov-mode", "0",
            "--threads", "8"
        ]
        
        result = subprocess.run(
            cmd,
            check=True,
            capture_output=True,
            text=True
        )
        
        if result.stdout:
            print(result.stdout)
        
        print("\nMMseqs2 clustering finished!")
    
    # Report results
    clusters_tsv = EMB_DIR / "clusters_cluster.tsv"
    if clusters_tsv.exists():
        with open(clusters_tsv, 'r') as f:
            num_lines = sum(1 for _ in f)
        print(f"Cluster mapping: {num_lines} lines written to {clusters_tsv}")
    else:
        print(f"Warning: Expected output {clusters_tsv} not found")
    
    # Clean up FASTA (keep only if needed for debugging)
    # seqs_fasta.unlink()
    print(f"\nKeeping {seqs_fasta} for reference")


if __name__ == "__main__":
    main()

